// with procedure method

PROCEDURE Dot_product(v1: ARRAY_OF INTEGER,v2 : ARRAY_OF INTEGER)
VAR
    i : INTEGER;
    ps : INTEGER := 0;

BEGIN
    FOR i FROM 0 TO 1 STEP 1  DO
        ps:=ps+v1[i]*v2[i];
    END_FOR
    IF (ps=0) THEN
        write("the vectors are orthogonal");
        ELSE
        write("the vectors are not orthogonal");
    END_IF
END




ALGORITHM checkpoint_procedure
VAR
    v1,v2 : ARRAY_OF INTEGER[2];
    i : INTEGER;
BEGIN
   FOR i FROM 0 TO 1 STEP 1  DO
       Read("Enter v1 :",v1[i])
   END_FOR
   FOR i FROM 0 TO 1 STEP 1  DO
       Read("Enter v2 :",v2[i])
   END_FOR

   Dot_product(v1,v2)

END

// with function method

FUNCTION Dot_product(v1: ARRAY_OF INTEGER,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i : INTEGER;
    ps : INTEGER := 0;

BEGIN
    FOR i FROM 0 TO 1 STEP 1  DO
        ps:=ps+v1[i]*v2[i];
    END_FOR
    RETURN ps;
END




ALGORITHM checkpoint_function
VAR
    v1,v2 : ARRAY_OF INTEGER[2];
    i,ps : INTEGER;
BEGIN
   FOR i FROM 0 TO 1 STEP 1  DO
       Read("Enter v1 :",v1[i])
   END_FOR
   FOR i FROM 0 TO 1 STEP 1  DO
       Read("Enter v2 :",v2[i])
   END_FOR
   ps:= Dot_product(v1,v2)

   IF (ps=0) THEN
        write("the vectors are orthogonal");
        ELSE
        write("the vectors are not orthogonal");
    END_IF
   

END

